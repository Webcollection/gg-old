;(function () {

    // This file contains the code to define the graphics and then
    // renders them using data randomly generated by data.js.

    $(document).ready(function() {

        // Define graphics ...

        var scatterplot = gg({
            layers: [
                { geometry: 'line', mapping: { x: 'd', y: 'r - 10', size: 'r', group: 'g', color: 'g' } },
                { geometry: 'point', mapping: {x: 'd * 0.8', y: 'r - d / 500.', size: 'r' }}
            ],
            scales: [
                { aesthetic: 'size', range: [0.5, 2] }
            ]
        });

        var symmetric = gg({
            layers: [
                { geometry: 'line', mapping: { x: 'd', y: 'r' } },
            ],
            scales: [
                { type: 'linear', aesthetic: 'y', center: 0 }
            ]
        });

        var linechart = gg({
            layers: [
                { geometry: 'line', mapping: { x: 'd', y: 'r', group: 'subject', color: 'subject'} },
                { geometry: 'text', mapping: { x: 'd', y: 'r', text: '{d}, {r}' },  show: "hover" }
            ],
            scales: [
                { aesthetic: 'color', type: 'color', range: ['#CFF09E', '#A8DBA8', '#79BD9A', '#3B8686'] }
            ]
        });

        var barchart = gg({
            layers: [{ geometry: 'interval', mapping: { x: 'd', y: 'r' }, color: 'blue', width: 2 }]
        });

        var histogram = gg({
            layers: [{
                geometry: 'interval',
                mapping: { x: 'group', y: 'count', color: 'group' },
                width: 20,
                statistic: { kind: 'sum', group: 'who', variable: 'purchases' }
            }],
            scales: [
                { type: 'categorical', aesthetic: 'x' },
                { type: 'linear', aesthetic: 'y', min: 0 }
            ]
        });

        var combined = gg({
            layers: [
                { geometry: 'point', mapping: { x: 'd', y: 'r' }, size: 3 },
                { geometry: 'line', mapping: { x: 'd', y: 'r' } }
                /*{ geometry: 'interval', mapping: { x: 'd', y: 'r' }, width: 2 },*/
            ]
        });

        var semilog = gg({
            layers: [
                { geometry: 'point', mapping: { x: 'd', y: 'r' }, size: 3 },
                { geometry: 'line', mapping: { x: 'd', y: 'r' } }
            ],
            scales: [ { type: 'log', aesthetic: 'y', legend: 'whatever' },
                      { aesthetic: 'x', legend: 'foo' } ]
        });

        var heightHistogram = gg({
            layers: [
                {
                    geometry: 'interval',
                    mapping: { x: 'bin', y: 'count', width: '((count % 5) + 1) * 20' },
                    statistic: { kind: 'bin', variable: 'height', bins: 30 }
                }
            ],
            scales: [
                { type: 'categorical', aesthetic: 'x' },
                { type: 'linear', aesthetic: 'y', min: 0 }
            ]
        });

        var boxplot = gg({
            layers: [ {
                geometry: 'box',
                mapping: { x: 'group', y: false },
                statistic: { kind: 'box', group: 'grade', variable: 'value' },
                width: 10
            }],
            scales: [
                { type: 'categorical', aesthetic: 'x' }
            ]
        });

        var twoPopulations = gg({
            layers: [ {
                geometry: 'point',
                mapping: { x: 'intelligence', y: 'wisdom', color: 'group' },
                size: 2,
                alpha: 0.5
            }]
        });

        var quadrants = gg({
            layers: [
                {
                    geometry: 'point',
                    mapping: { x: 'x', y: 'y', size: function(row){ return row['size']*2 + 50}}
                },
                { geometry: 'text', mapping: { x: 'x', y: 'y', text: '{name}: {size}' },  show: "hover" }
            ],
            scales: [ { aesthetic: 'size', range: [ 1, 5 ]} ]
        });

        // ... and render 'em

        var data = gg.sampleData;
        var w    = 1000;
        var h    = 200;
        var ex   = function () { return d3.select('#examples').append('span'); };

        var bigdata = _.map(_.range(0, 5000), function(d) {
            g = Math.floor(Math.random() * 10);
            return {d:d, r:Math.random() + g, g: g};
        })
        scatterplot.renderer(w, h, ex())(bigdata)

        //symmetric.render(w, h, ex(), data.toBeCentered);
//        quadrants.renderer(w, h, ex())(data.quadrants);
        linechart.renderer(w, h, ex())(data.upwardSubjects);
        combined.renderer(w, h, ex())(data.upward);
        barchart.renderer(w, h, ex())(data.upward);
        histogram.renderer(w, h, ex())(data.purchases);
        semilog.renderer(w, h, ex())(data.semiLogData);
        heightHistogram.renderer(w, h, ex())(data.heightWeight);
        twoPopulations.renderer(w, h, ex())(data.twoPopulations);
        boxplot.renderer(w, h, ex())(data.forBoxPlots);
    });
})();
