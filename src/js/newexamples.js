
var geom_area = {
  geom: {
    type: "area",
    aes: {
      x: "d",
      y: "e",
      group: "{{fill: t, stroke: t}}"
    }
  }
  ,pos: "stack"
  ,scales: { fill: { type: "color" }}
};

var geom_boxplot =  {
  geom: { type: "boxplot",
          aes: {
             x: '{String(group)+"q"}',
             fill: "group",
             stroke: "group" }
        }
 ,stat: { type: "boxplot", aes: {group: 't', x: 'e'} }
 ,scales: {
    y: {type: 'linear'},//, lim: [0, 500]},
    r: {type: 'linear', range: [3,6]},
    fill: {type: "color"},
    stroke: {type: "color"}
  }
};

var geom_interval = {
  geom: { type:"interval", aes: {y: '{total/(1+count)}'} }
 ,aes: {x: 'd', y: 'e', 'fill': 'f',  "fill-opacity": 0.9}
 ,stat: "bin"
 //,coord: "yflip"
};

var geom_point_1 = {
  geom: "point"
 ,aes: {x: 'd', y: 'e'}
}

var geom_point_sum = {
  geom: "point"
 ,aes: {x: 'd', y: 'e'}
 ,stat: "bin"

}

var geom_point_interval = {
  geom: "interval"
 ,aes: {x: 'd', y: 'e'}
 ,stat: "bin"
}

var geom_point_2 = {
  geom: "point"
 ,aes: {x: 'd', y: 'e', r: 'g'}
 ,scales: { r: { range: [2, 10] } }

}

var geom_point_3 = {
  geom: "point"
 ,aes: {x: 'd', y: 'e', r: 'g', fill: 'f'}
  ,scales: {
    fill: "color",
    r: { range: [2, 10] }
  }

};

var geom_point_4 = {
  geom: "point"
 ,aes: {x: 'd', y: 'e', r: 'g', fill: 'f'}
  ,pos: { type: 'jitter'}
  ,scales: {
    fill: "color",
    r: { range: [2, 10] }
  }

};

var colored_lines = {
  geom: "line",
  aes: {
    x: 'd',  y: "e",
    group : "{{ 'stroke':g, 'fill': g}}"
  },
/*  scales: {
   "stroke-width": {
     range: [1, 5]
   }
 }*/
};




/*  var geom_point_5 = {
  geom: { type:"point"}
 ,aes: {x: 'd', y: 'e', r: 'g', fill: '{g*10 + f}'}
  ,pos: { type: 'jitter', y:0.5, x:0}
  ,stat: "bin"
  ,scales: {
    fill: {type: "color"},
    y: {type: 'linear'},
    r: { range: [1, 5] }
  }

}
*/




var geoms = {
  //area: geom_area,
  //boxplot: geom_boxplot,
  //interval: geom_interval,
  point: geom_point_1
  ,sum: geom_point_sum
  ,interval: geom_point_interval
  ,radius: geom_point_2
  ,color: geom_point_3
  ,jitter: geom_point_4
  ,line: colored_lines
};

var selected_geoms = {
  point: true
};













;(function (geoms, selected_geoms) {
  var bigdata = [];



  var reset_query = function() {
    var layers = _.map(selected_geoms, function(checked, name){
      if (checked) { return geoms[name]; }
    });
    layers = _.compact(layers)[0]
    var specs = layers;
    /*var specs = {
      layers: layers
    }*/
    $("#query").val(JSON.prettify(specs, 2, 10));
    render_query();
  };

  var render_query = function() {
    var text = $("#query").val();
    var specs = JSON.parse(text);
    specs = _.flatten([specs]);
    specs = {layers: specs};
    render(specs);
  }


  var setup_queryselect = function() {
    var controls = $("#controls");
    var geom_controls = $("<div></div>");
    controls.append(geom_controls);

    _.each(geoms, function(gspec, name) {
      var check = $("<input name='foo' id='cb_"+name+"' value='"+name+"' type='radio'/>");
      //var check = $("<input name='foo' id='cb_"+name+"' value='"+name+"' type='checkbox'/>");
      check
        .change(function(){
          var name = $('input[type=radio]:checked').val()
          selected_geoms = {}
          selected_geoms[name] = true;


          reset_query();
        })
    //if (selected_geoms[name])
    //       check.attr("checked", "checked")

      var label = $("<label>")
        .append(check)
        .append($("<span>" + name + "</span>"))

      geom_controls.append(label)

    });

    $("#submit").click(function() {
      render_query();
    });
  }

  var setup_sample_data = function(data, n) {
    if (!data || data.length == 0) return;
    var row = data[0];
    var keys = _.keys(row);
    keys = ['d', 'e', 'g', 'f', 't'];
    var table = $("#sample_data");
    n = Math.min(data.length, n || 5);
    _.each(_.range(n), function(idx) {
      var tr = $("<tr></tr>");
      var row = data[idx];
      _.map(keys, function(key) {
        var td = $("<td></td>")
          .text(row[key]);
        tr.append(td);
      });
      table.append(tr);
    });
  }

  var render = function(specs, w, h) {
    var w    = w || 800;
    var h    = h || 600;
    var ex   = function () {
      $("#examples").empty();
      return d3.select('#examples').append('span');
    };
    var plot = gg(specs)
    plot.render(w, h, ex(), bigdata)
  }


  // This file contains the code to define the graphics and then
  // renders them using data randomly generated by data.js.

  $(document).ready(function() {
    Math.seedrandom("zero");

    //
    // Generate random data with float attributes: d, r, g, f, t
    //
    bigdata = _.map(_.range(0, 100), function(d) {
      g = Math.floor(Math.random() * 3);
      f = Math.floor(Math.random() * 3);
      t = Math.floor(Math.random() * 3);
      return {d:d, e: d + d*Math.random(), g: g, f:f, t:t};
    });

    setup_sample_data(bigdata);


    setup_queryselect()

    // create and render

    reset_query();
    render_query();


  });
})(geoms, selected_geoms);
